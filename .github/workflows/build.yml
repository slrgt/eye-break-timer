name: Build and Release Eye-Break Timer

on:
  push:
    branches: [ main ]
  # Optionally trigger on pull requests
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Debug - Show directory structure (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir
          echo "Current directory: $pwd"
        
      - name: Debug - Show directory structure (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ls -la
          pwd
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          
      - name: Install dependencies
        run: |
          npm ci
          
      - name: Debug - Show package.json (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          type package.json
          
      - name: Debug - Show package.json (macOS)
        if: matrix.os == 'macos-latest'  
        run: |
          cat package.json
          
      # Windows-specific build steps
      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: |
          echo "Starting Windows build process..."
          echo "Current directory: $pwd"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          # Clean any previous builds
          if (Test-Path -Path "dist") { Remove-Item -Path "dist" -Recurse -Force }
          if (Test-Path -Path "out") { Remove-Item -Path "out" -Recurse -Force }
          
          # Verify electron-builder installation
          echo "Verifying electron-builder installation..."
          npx electron-builder --version
          
          # Set environment variables for Windows build
          $env:DEBUG = "electron-builder"
          $env:ELECTRON_BUILDER_VERBOSE = "true"
          $env:ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES = "true"
          $env:ELECTRON_BUILDER_OFFLINE = "true"
          
          # Try building with electron-builder
          echo "Attempting to build with electron-builder..."
          $ErrorActionPreference = "Continue"
          
          try {
            # First try the npm script with verbose output
            echo "Running npm run dist:win..."
            npm run dist:win --verbose
            echo "dist:win completed successfully"
          } catch {
            echo "dist:win failed, trying direct electron-builder command..."
            # Try direct electron-builder command as fallback with verbose output
            npx electron-builder --win --x64 --nsis --portable --verbose
          }
          
          # Check if build was successful
          if (Test-Path -Path "out") {
            echo "Build output directory exists"
            Get-ChildItem -Path "out" -Recurse
          } else {
            echo "Build output directory not found"
            # Try to get more information about the failure
            if (Test-Path -Path "node_modules\.bin\electron-builder.cmd") {
              echo "electron-builder is installed"
              Get-Content -Path "node_modules\.bin\electron-builder.cmd"
            } else {
              echo "electron-builder is not installed in node_modules\.bin"
            }
            
            # Check for common build issues
            if (Test-Path -Path "node_modules\canvas") {
              echo "canvas module is installed"
            } else {
              echo "canvas module is missing"
            }
            
            # Show npm error log if it exists
            if (Test-Path -Path "$env:APPDATA\npm-cache\_logs") {
              echo "NPM error logs:"
              Get-Content -Path "$env:APPDATA\npm-cache\_logs\*" -Tail 20
            }
            
            # Show electron-builder logs if they exist
            if (Test-Path -Path "$env:USERPROFILE\.electron-builder\logs") {
              echo "electron-builder logs:"
              Get-Content -Path "$env:USERPROFILE\.electron-builder\logs\*" -Tail 20
            }
            
            exit 1
          }
          
      # macOS-specific build steps
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          npm run dist:mac
          
      - name: List build output files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Looking for build outputs..."
          Get-ChildItem
          
          if (Test-Path -Path "out") {
            echo "out directory contents:"
            Get-ChildItem -Path "out" -Recurse
          } else {
            echo "out/ directory not found"
          }
          
          if (Test-Path -Path "dist") {
            echo "dist directory contents:"
            Get-ChildItem -Path "dist" -Recurse
          } else {
            echo "dist/ directory not found"
          }
          
          if (Test-Path -Path "node_modules\.bin") {
            echo "node_modules\.bin contents:"
            Get-ChildItem -Path "node_modules\.bin"
          } else {
            echo "node_modules\.bin not found"
          }
          
      - name: List build output files (macOS)
        if: matrix.os == 'macos-latest'  
        run: |
          echo "Looking for build outputs..."
          ls -la
          ls -la out/ || echo "out/ directory not found"
          ls -la dist/ || echo "dist/ directory not found"
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.zip" || echo "No build artifacts found"
        
      # Always run this step regardless of previous step failure
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: eye-break-timer-windows
          path: |
            dist/*.exe
            out/**/*.exe
            
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: eye-break-timer-mac
          path: |
            dist/*.dmg
            dist/*.zip
            out/**/*.dmg
            out/**/*.zip
            
      - name: Create Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            out/**/*.exe
            out/**/*.dmg
            out/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }} 