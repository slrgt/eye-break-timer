name: Build and Release Eye-Break Timer

on:
  push:
    branches: [ main ]
  # Optionally trigger on pull requests
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Debug - Show directory structure (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir
          echo "Current directory: $pwd"
        
      - name: Debug - Show directory structure (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ls -la
          pwd
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          
      - name: Install dependencies
        run: |
          npm ci
          
      - name: Debug - Show package.json (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          type package.json
          
      - name: Debug - Show package.json (macOS)
        if: matrix.os == 'macos-latest'  
        run: |
          cat package.json
          
      # Instead of 'build', use 'pack' which is defined in your package.json
      - name: Build Electron app
        run: |
          npm run pack
          
      # For Windows, use simplified build command with verbose logging
      - name: Package Windows app
        if: matrix.os == 'windows-latest'
        run: |
          echo "Starting Windows build..."
          npm config list
          
          # Try to use the npm script first
          try {
            npm run dist:win
            echo "dist:win completed successfully"
          } catch {
            echo "dist:win failed, trying direct electron-builder command..."
            # Try direct electron-builder command as fallback
            npx electron-builder --win --x64 --dir
          }
          
          echo "Windows build completed or handled errors."
          
      # For macOS, use dist:mac instead of make
      - name: Package macOS app
        if: matrix.os == 'macos-latest'
        run: |
          npm run dist:mac
          
      - name: List build output files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Looking for build outputs..."
          Get-ChildItem
          
          if (Test-Path -Path "out") {
            echo "out directory contents:"
            Get-ChildItem -Path "out" -Recurse
          } else {
            echo "out/ directory not found"
          }
          
          if (Test-Path -Path "dist") {
            echo "dist directory contents:"
            Get-ChildItem -Path "dist" -Recurse
          } else {
            echo "dist/ directory not found"
          }
          
          if (Test-Path -Path "node_modules\.bin") {
            echo "node_modules\.bin contents:"
            Get-ChildItem -Path "node_modules\.bin"
          } else {
            echo "node_modules\.bin not found"
          }
          
      - name: List build output files (macOS)
        if: matrix.os == 'macos-latest'  
        run: |
          echo "Looking for build outputs..."
          ls -la
          ls -la out/ || echo "out/ directory not found"
          ls -la dist/ || echo "dist/ directory not found"
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.zip" || echo "No build artifacts found"
        
      # Always run this step regardless of previous step failure
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: eye-break-timer-windows
          path: |
            dist/*.exe
            out/**/*.exe
            
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: eye-break-timer-mac
          path: |
            dist/*.dmg
            dist/*.zip
            out/**/*.dmg
            out/**/*.zip
            
      - name: Create Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            out/**/*.exe
            out/**/*.dmg
            out/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }} 